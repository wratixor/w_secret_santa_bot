import asyncio
import logging

from create_bot import bot, dp, admins
from handlers.admin_menu import admin_router
from handlers.group_command import start_router
from aiogram.types import BotCommand, BotCommandScopeAllPrivateChats


logger = logging.getLogger(__name__)

async def set_all_commands():
    commands = [BotCommand(command='/start', description='–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è'),
                BotCommand(command='/help', description='–ü–æ–º–æ—â—å'),
                BotCommand(command='/join', description='–í—Å—Ç—É–ø–∏—Ç—å –≤ –≥—Ä—É–ø–ø—É'),
                BotCommand(command='/leave', description='–ü–æ–∫–∏–Ω—É—Ç—å –≥—Ä—É–ø–ø—É'),
                BotCommand(command='/status', description='–°—Ç–∞—Ç—É—Å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤'),
                BotCommand(command='/mix', description='–ü–µ—Ä–µ–º–µ—à–∞—Ç—å –ø–æ–¥–∞—Ä–∫–∏'),
                BotCommand(command='/send', description='–†–∞–∑–¥–∞—Ç—å —Ü–µ–ª–∏')
                ]
    await bot.set_my_commands(commands)

async def set_private_commands():
    commands = [BotCommand(command='/start', description='–ó–∞–ø—É—Å–∫'),
                BotCommand(command='/help', description='–ü–æ–º–æ—â—å')
                ]
    await bot.set_my_commands(commands, BotCommandScopeAllPrivateChats())

async def start_bot():
    logger.warning('Bot running')
    bn = await bot.get_my_name()
    for admin_id in admins:
        try:
            await bot.send_message(admin_id, f'{bn.name} –∑–∞–ø—É—â–µ–Ω! ü•≥')
        except Exception as e:
            logger.error(f'start_bot(): {e}')

async def stop_bot():
    logger.warning('Bot stopping')
    bn = await bot.get_my_name()
    for admin_id in admins:
        try:
            await bot.send_message(admin_id, f'{bn.name} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ó–∞ —á—Ç–æ? üòî')
        except Exception as e:
            logger.error(f'stop_bot(): {e}')

async def main():
    dp.include_router(start_router)
    dp.include_router(admin_router)
    dp.startup.register(set_all_commands)
    dp.startup.register(set_private_commands)

    dp.startup.register(start_bot)
    dp.shutdown.register(stop_bot)

    try:
        await bot.delete_webhook(drop_pending_updates=True)
        await dp.start_polling(bot, allowed_updates=dp.resolve_used_update_types())
    except Exception as e:
        logger.error(f'main(): {e}')
    finally:
        await bot.session.close()
        await exit(0)

if __name__ == "__main__":
    asyncio.run(main())
